PORTFOLIO BACKEND DEVELOPMENT GUIDE
====================================

FRONTEND OVERVIEW
-----------------
Your portfolio is a Next.js application with the following key features:
- 3D avatar interaction (Three.js + React Three Fiber)
- AI chatbot on homepage
- AI tools directory with search/filter
- AI blog with categories
- CV chat interface (RAG system)
- Contact form
- Project showcase

BACKEND REQUIREMENTS
====================

1. FRAMEWORK & SETUP
--------------------
- FastAPI (Python) - as mentioned in your frontend code
- Python 3.8+
- PostgreSQL or SQLite for database
- Redis for caching (optional but recommended)

2. CORE API ENDPOINTS
=====================

A. CHAT SYSTEM (/chat/*)
------------------------
POST /chat/send
- Purpose: Handle homepage chatbot interactions
- Request Body: {"message": "string"}
- Response: {"answer": "string", "timestamp": "datetime"}
- Features: 
  * Store chat history
  * Integrate with OpenAI/OpenRouter API
  * Context-aware responses about Daniyal's experience

B. AI TOOLS API (/tools/*)
--------------------------
GET /tools/list
- Purpose: Provide AI tools data for tools page
- Response: {
    "items": [
      {
        "id": "string",
        "name": "string", 
        "description": "string",
        "category": "string",
        "status": "string",
        "url": "string",
        "pricing": "string"
      }
    ]
  }
- Features:
  * Database storage for tools
  * Category filtering
  * Search functionality
  * Status management (Popular, Trending, Professional, Open Source)

C. BLOG/NEWS API (/news/*)
---------------------------
GET /news/list
- Purpose: Provide blog posts for blog page
- Response: {
    "items": [
      {
        "id": "string",
        "title": "string",
        "excerpt": "string", 
        "category": "string",
        "published": "datetime",
        "readTime": "string",
        "featured": "boolean",
        "content": "string" (full article)
      }
    ]
  }
- Features:
  * Database storage for articles
  * Category system (Healthcare, Marketing, Technology, Ethics, Finance, Education, Transportation)
  * Featured articles system
  * Search and filtering
  * Markdown support for content

D. CV CHAT SYSTEM (/cv/*)
--------------------------
POST /cv/upload
- Purpose: Upload CV document for RAG system
- Request: Multipart form with PDF/DOC file
- Response: {"success": "boolean", "message": "string"}

POST /cv/query
- Purpose: Ask questions about uploaded CV
- Request Body: {"question": "string"}
- Response: {"answer": "string", "confidence": "float"}
- Features:
  * Document processing (PDF/DOC parsing)
  * Vector embeddings storage
  * RAG implementation with Chroma/FAISS
  * Context-aware responses

E. CONTACT FORM (/contact/*)
----------------------------
POST /contact/submit
- Purpose: Handle contact form submissions
- Request Body: {
    "name": "string",
    "email": "string", 
    "message": "string"
  }
- Response: {"success": "boolean", "message": "string"}
- Features:
  * Email notification system
  * Form validation
  * Spam protection
  * Database storage

3. DATABASE SCHEMA
==================

A. USERS TABLE (if you want user management)
-------------------------------------------
- id (UUID, Primary Key)
- email (string, unique)
- name (string)
- created_at (timestamp)
- updated_at (timestamp)

B. CHAT_HISTORY TABLE
---------------------
- id (UUID, Primary Key)
- session_id (string)
- message (text)
- response (text)
- timestamp (timestamp)
- user_agent (string, optional)

C. AI_TOOLS TABLE
-----------------
- id (UUID, Primary Key)
- name (string)
- description (text)
- category (string)
- status (string)
- url (string)
- pricing (string)
- created_at (timestamp)
- updated_at (timestamp)

D. BLOG_POSTS TABLE
-------------------
- id (UUID, Primary Key)
- title (string)
- excerpt (text)
- content (text, markdown)
- category (string)
- published (timestamp)
- read_time (string)
- readTime (string)
- featured (boolean)
- slug (string, unique)
- created_at (timestamp)
- updated_at (timestamp)

E. CV_DOCUMENTS TABLE
---------------------
- id (UUID, Primary Key)
- filename (string)
- file_path (string)
- file_size (integer)
- uploaded_at (timestamp)
- processed (boolean)
- embeddings_path (string)

F. CV_QUERIES TABLE
-------------------
- id (UUID, Primary Key)
- question (text)
- answer (text)
- confidence (float)
- timestamp (timestamp)
- session_id (string)

G. CONTACT_SUBMISSIONS TABLE
---------------------------
- id (UUID, Primary Key)
- name (string)
- email (string)
- message (text)
- submitted_at (timestamp)
- status (string: pending, processed, archived)

4. EXTERNAL INTEGRATIONS
========================

A. OPENAI/OPENROUTER API
------------------------
- API key management
- Rate limiting
- Cost tracking
- Model selection (GPT-4, GPT-3.5-turbo)

B. VECTOR DATABASE
------------------
- Chroma (recommended for development)
- FAISS (for production scaling)
- Embedding models (OpenAI text-embedding-ada-002)

C. FILE STORAGE
---------------
- Local storage for development
- AWS S3/Google Cloud Storage for production
- File type validation
- Virus scanning (optional)

5. ENVIRONMENT VARIABLES
========================
Create a .env file with:
```
DATABASE_URL=postgresql://user:password@localhost/dbname
OPENAI_API_KEY=your_openai_key
OPENROUTER_API_KEY=your_openrouter_key
SECRET_KEY=your_secret_key
ENVIRONMENT=development
CORS_ORIGINS=http://localhost:3000,https://yourdomain.com
```

6. FRONTEND INTEGRATION POINTS
==============================

A. API BASE URL
---------------
Frontend expects: process.env.NEXT_PUBLIC_API_URL
Default fallback: http://localhost:8000

B. CORS CONFIGURATION
---------------------
Allow frontend domain (localhost:3000 for development)
Handle preflight requests

C. RESPONSE FORMATS
-------------------
All API responses should follow consistent format:
{
  "success": boolean,
  "data": object/array,
  "message": string (optional),
  "error": string (optional)
}

7. DEVELOPMENT WORKFLOW
=======================

1. Set up FastAPI project structure
2. Implement database models with SQLAlchemy
3. Create API endpoints with proper validation
4. Add authentication if needed
5. Implement RAG system for CV chat
6. Add rate limiting and security
7. Test with frontend
8. Deploy and update frontend environment variables

8. RECOMMENDED PACKAGES
=======================
- fastapi
- uvicorn
- sqlalchemy
- alembic (database migrations)
- pydantic (data validation)
- python-multipart (file uploads)
- chromadb (vector database)
- openai (AI integration)
- python-jose (JWT tokens)
- passlib (password hashing)
- python-dotenv (environment variables)

9. SECURITY CONSIDERATIONS
==========================
- Input validation and sanitization
- Rate limiting
- CORS configuration
- API key management
- SQL injection prevention
- File upload security
- XSS protection

10. TESTING STRATEGY
====================
- Unit tests for API endpoints
- Integration tests for database operations
- Frontend-backend integration tests
- Load testing for chat endpoints
- Security testing

This backend will provide all the functionality your frontend expects and create a robust foundation for your AI-powered portfolio!

ADDITIONAL COMPREHENSIVE INFORMATION FOR LLM BACKEND DEVELOPMENT
===============================================================

11. PROJECT STRUCTURE & ORGANIZATION
====================================

A. RECOMMENDED DIRECTORY STRUCTURE
----------------------------------
```
backend/
├── app/
│   ├── __init__.py
│   ├── main.py                 # FastAPI app instance
│   ├── config.py               # Configuration settings
│   ├── database.py             # Database connection
│   ├── models/                 # SQLAlchemy models
│   │   ├── __init__.py
│   │   ├── user.py
│   │   ├── chat.py
│   │   ├── tools.py
│   │   ├── blog.py
│   │   ├── cv.py
│   │   └── contact.py
│   ├── schemas/                # Pydantic schemas
│   │   ├── __init__.py
│   │   ├── user.py
│   │   ├── chat.py
│   │   ├── tools.py
│   │   ├── blog.py
│   │   ├── cv.py
│   │   └── contact.py
│   ├── api/                    # API routes
│   │   ├── __init__.py
│   │   ├── v1/
│   │   │   ├── __init__.py
│   │   │   ├── chat.py
│   │   │   ├── tools.py
│   │   │   ├── news.py
│   │   │   ├── cv.py
│   │   │   └── contact.py
│   │   └── deps.py             # Dependencies
│   ├── core/                   # Core functionality
│   │   ├── __init__.py
│   │   ├── security.py         # Security utilities
│   │   ├── ai_client.py        # AI service clients
│   │   ├── vector_store.py     # Vector database operations
│   │   └── email.py            # Email functionality
│   ├── services/               # Business logic
│   │   ├── __init__.py
│   │   ├── chat_service.py
│   │   ├── tools_service.py
│   │   ├── blog_service.py
│   │   ├── cv_service.py
│   │   └── contact_service.py
│   └── utils/                  # Utility functions
│       ├── __init__.py
│       ├── file_handlers.py
│       └── validators.py
├── alembic/                    # Database migrations
├── tests/                      # Test files
├── requirements.txt
├── .env
├── .gitignore
└── README.md
```

B. MAIN.PY STRUCTURE
--------------------
```python
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.api.v1 import chat, tools, news, cv, contact
from app.config import settings

app = FastAPI(
    title="Portfolio Backend API",
    description="AI-powered portfolio backend with RAG capabilities",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(chat.router, prefix="/api/v1/chat", tags=["chat"])
app.include_router(tools.router, prefix="/api/v1/tools", tags=["tools"])
app.include_router(news.router, prefix="/api/v1/news", tags=["news"])
app.include_router(cv.router, prefix="/api/v1/cv", tags=["cv"])
app.include_router(contact.router, prefix="/api/v1/contact", tags=["contact"])

@app.get("/")
async def root():
    return {"message": "Portfolio Backend API", "version": "1.0.0"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.utcnow()}
```

12. DETAILED IMPLEMENTATION EXAMPLES
====================================

A. CHAT SERVICE IMPLEMENTATION
------------------------------
```python
# app/services/chat_service.py
from typing import List, Dict, Any
import openai
from app.models.chat import ChatHistory
from app.schemas.chat import ChatRequest, ChatResponse
from app.core.ai_client import OpenAIClient
from app.database import get_db

class ChatService:
    def __init__(self):
        self.ai_client = OpenAIClient()
        self.context = """
        You are Daniyal's AI assistant. Daniyal is a software engineer specializing in:
        - Full-stack development with Python/FastAPI backends
        - AI/ML integration and LLM applications
        - React/Next.js frontend development
        - 3D graphics with Three.js and React Three Fiber
        - Vector databases and RAG systems
        
        Answer questions about Daniyal's experience, skills, and projects professionally.
        Keep responses concise but informative.
        """
    
    async def process_message(self, request: ChatRequest, session_id: str) -> ChatResponse:
        try:
            # Get AI response
            ai_response = await self.ai_client.get_chat_response(
                message=request.message,
                context=self.context
            )
            
            # Store in database
            chat_history = ChatHistory(
                session_id=session_id,
                message=request.message,
                response=ai_response,
                timestamp=datetime.utcnow()
            )
            
            db = next(get_db())
            db.add(chat_history)
            db.commit()
            
            return ChatResponse(
                answer=ai_response,
                timestamp=datetime.utcnow()
            )
            
        except Exception as e:
            logger.error(f"Error processing chat message: {str(e)}")
            raise HTTPException(status_code=500, detail="Failed to process message")
```

B. RAG SYSTEM IMPLEMENTATION
----------------------------
```python
# app/services/cv_service.py
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
import PyPDF2
import docx

class CVService:
    def __init__(self):
        self.embeddings = OpenAIEmbeddings()
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200
        )
    
    async def process_cv_upload(self, file: UploadFile) -> Dict[str, Any]:
        try:
            # Extract text from document
            if file.filename.endswith('.pdf'):
                text = self._extract_pdf_text(file)
            elif file.filename.endswith('.docx'):
                text = self._extract_docx_text(file)
            else:
                raise ValueError("Unsupported file format")
            
            # Split text into chunks
            chunks = self.text_splitter.split_text(text)
            
            # Create vector store
            vectorstore = Chroma.from_texts(
                texts=chunks,
                embedding=self.embeddings,
                collection_name="cv_embeddings"
            )
            
            # Store metadata
            cv_doc = CVDocument(
                filename=file.filename,
                file_path=f"uploads/{file.filename}",
                file_size=len(file.file.read()),
                uploaded_at=datetime.utcnow(),
                processed=True,
                embeddings_path="cv_embeddings"
            )
            
            return {"success": True, "message": "CV processed successfully"}
            
        except Exception as e:
            logger.error(f"Error processing CV: {str(e)}")
            raise HTTPException(status_code=500, detail="Failed to process CV")
    
    async def query_cv(self, question: str) -> Dict[str, Any]:
        try:
            # Retrieve relevant chunks
            vectorstore = Chroma(
                collection_name="cv_embeddings",
                embedding_function=self.embeddings
            )
            
            docs = vectorstore.similarity_search(question, k=3)
            context = "\n".join([doc.page_content for doc in docs])
            
            # Generate answer using AI
            prompt = f"""
            Based on the following CV context, answer this question: {question}
            
            Context: {context}
            
            Answer:
            """
            
            response = await self.ai_client.get_chat_response(prompt)
            
            return {
                "answer": response,
                "confidence": 0.85,  # Calculate based on similarity scores
                "sources": [doc.metadata for doc in docs]
            }
            
        except Exception as e:
            logger.error(f"Error querying CV: {str(e)}")
            raise HTTPException(status_code=500, detail="Failed to query CV")
```

13. ADVANCED FEATURES & OPTIMIZATIONS
======================================

A. RATE LIMITING IMPLEMENTATION
-------------------------------
```python
# app/core/rate_limiter.py
from fastapi import HTTPException, Request
import time
from collections import defaultdict
import asyncio

class RateLimiter:
    def __init__(self, requests_per_minute: int = 60):
        self.requests_per_minute = requests_per_minute
        self.requests = defaultdict(list)
    
    async def check_rate_limit(self, request: Request, identifier: str):
        current_time = time.time()
        user_requests = self.requests[identifier]
        
        # Remove old requests
        user_requests[:] = [req_time for req_time in user_requests 
                           if current_time - req_time < 60]
        
        if len(user_requests) >= self.requests_per_minute:
            raise HTTPException(
                status_code=429,
                detail="Rate limit exceeded. Try again later."
            )
        
        user_requests.append(current_time)
```

B. CACHING IMPLEMENTATION
-------------------------
```python
# app/core/cache.py
import redis
import json
from typing import Any, Optional
from app.config import settings

class CacheManager:
    def __init__(self):
        self.redis_client = redis.Redis(
            host=settings.REDIS_HOST,
            port=settings.REDIS_PORT,
            db=settings.REDIS_DB,
            decode_responses=True
        )
    
    async def get(self, key: str) -> Optional[Any]:
        try:
            value = self.redis_client.get(key)
            return json.loads(value) if value else None
        except Exception:
            return None
    
    async def set(self, key: str, value: Any, expire: int = 3600):
        try:
            self.redis_client.setex(
                key,
                expire,
                json.dumps(value, default=str)
            )
        except Exception:
            pass
    
    async def delete(self, key: str):
        try:
            self.redis_client.delete(key)
        except Exception:
            pass
```

14. ERROR HANDLING & LOGGING
============================

A. GLOBAL EXCEPTION HANDLER
---------------------------
```python
# app/core/exceptions.py
from fastapi import HTTPException, Request
from fastapi.responses import JSONResponse
import logging

logger = logging.getLogger(__name__)

class CustomHTTPException(HTTPException):
    def __init__(self, status_code: int, detail: str, error_code: str = None):
        super().__init__(status_code=status_code, detail=detail)
        self.error_code = error_code

async def global_exception_handler(request: Request, exc: Exception):
    if isinstance(exc, CustomHTTPException):
        logger.warning(f"Custom HTTP Exception: {exc.detail}")
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "success": False,
                "error": exc.detail,
                "error_code": exc.error_code,
                "timestamp": datetime.utcnow().isoformat()
            }
        )
    
    # Log unexpected errors
    logger.error(f"Unexpected error: {str(exc)}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Internal server error",
            "timestamp": datetime.utcnow().isoformat()
        }
    )
```

B. LOGGING CONFIGURATION
------------------------
```python
# app/core/logging.py
import logging
import sys
from pathlib import Path

def setup_logging():
    # Create logs directory
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(log_dir / "app.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # Set specific log levels
    logging.getLogger("uvicorn").setLevel(logging.INFO)
    logging.getLogger("sqlalchemy").setLevel(logging.WARNING)
```

15. DEPLOYMENT & PRODUCTION CONSIDERATIONS
==========================================

A. DOCKER CONFIGURATION
-----------------------
```dockerfile
# Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create non-root user
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Run application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

B. DOCKER-COMPOSE FOR DEVELOPMENT
---------------------------------
```yaml
# docker-compose.yml
version: '3.8'

services:
  backend:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/portfolio
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=portfolio
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

volumes:
  postgres_data:
```

16. TESTING IMPLEMENTATION
==========================

A. UNIT TEST EXAMPLE
--------------------
```python
# tests/test_chat_service.py
import pytest
from unittest.mock import Mock, patch
from app.services.chat_service import ChatService
from app.schemas.chat import ChatRequest

@pytest.fixture
def chat_service():
    return ChatService()

@pytest.fixture
def mock_ai_client():
    with patch('app.services.chat_service.OpenAIClient') as mock:
        mock_instance = Mock()
        mock_instance.get_chat_response.return_value = "Hello! I'm Daniyal's AI assistant."
        mock.return_value = mock_instance
        yield mock_instance

async def test_process_message_success(chat_service, mock_ai_client):
    request = ChatRequest(message="Tell me about Daniyal")
    
    response = await chat_service.process_message(request, "test_session")
    
    assert response.answer == "Hello! I'm Daniyal's AI assistant."
    assert response.timestamp is not None
    mock_ai_client.get_chat_response.assert_called_once()
```

B. INTEGRATION TEST EXAMPLE
---------------------------
```python
# tests/test_chat_api.py
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_chat_endpoint():
    response = client.post(
        "/api/v1/chat/send",
        json={"message": "Hello"}
    )
    
    assert response.status_code == 200
    data = response.json()
    assert "answer" in data
    assert "timestamp" in data
```

17. MONITORING & OBSERVABILITY
===============================

A. HEALTH CHECK ENDPOINTS
-------------------------
```python
@app.get("/health/detailed")
async def detailed_health_check():
    health_status = {
        "status": "healthy",
        "timestamp": datetime.utcnow(),
        "services": {
            "database": await check_database_health(),
            "redis": await check_redis_health(),
            "ai_service": await check_ai_service_health(),
            "vector_store": await check_vector_store_health()
        }
    }
    
    # Check if any service is unhealthy
    unhealthy_services = [
        service for service, status in health_status["services"].items()
        if not status["healthy"]
    ]
    
    if unhealthy_services:
        health_status["status"] = "degraded"
        health_status["unhealthy_services"] = unhealthy_services
    
    return health_status
```

B. METRICS COLLECTION
---------------------
```python
# app/core/metrics.py
from prometheus_client import Counter, Histogram, Gauge
import time

# Request metrics
REQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])
REQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration')

# AI service metrics
AI_REQUESTS = Counter('ai_requests_total', 'Total AI API requests', ['service', 'model'])
AI_RESPONSE_TIME = Histogram('ai_response_time_seconds', 'AI API response time')

# Database metrics
DB_QUERY_DURATION = Histogram('db_query_duration_seconds', 'Database query duration')
DB_CONNECTIONS = Gauge('db_connections_active', 'Active database connections')
```

18. SECURITY ENHANCEMENTS
==========================

A. INPUT VALIDATION & SANITIZATION
----------------------------------
```python
# app/utils/validators.py
import re
from typing import Optional
from pydantic import validator

class SecurityValidators:
    @staticmethod
    def sanitize_html(text: str) -> str:
        """Remove potentially dangerous HTML tags"""
        dangerous_tags = re.compile(r'<script.*?</script>|<iframe.*?</iframe>', re.IGNORECASE)
        return dangerous_tags.sub('', text)
    
    @staticmethod
    def validate_email(email: str) -> bool:
        """Validate email format and prevent injection"""
        email_pattern = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')
        return bool(email_pattern.match(email))
    
    @staticmethod
    def validate_filename(filename: str) -> bool:
        """Prevent path traversal attacks"""
        dangerous_patterns = ['..', '/', '\\', ':', '*', '?', '"', '<', '>', '|']
        return not any(pattern in filename for pattern in dangerous_patterns)
```

B. JWT AUTHENTICATION (IF NEEDED)
---------------------------------
```python
# app/core/security.py
from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext
from app.config import settings

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

def verify_token(token: str):
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        return payload
    except JWTError:
        return None
```

19. PERFORMANCE OPTIMIZATIONS
==============================

A. DATABASE QUERY OPTIMIZATION
------------------------------
```python
# app/models/base.py
from sqlalchemy import Index
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

# Example of adding database indexes for performance
class BlogPost(Base):
    __tablename__ = "blog_posts"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    title = Column(String, nullable=False)
    category = Column(String, nullable=False)
    published = Column(DateTime, nullable=False)
    featured = Column(Boolean, default=False)
    
    # Add indexes for frequently queried fields
    __table_args__ = (
        Index('idx_blog_category', 'category'),
        Index('idx_blog_published', 'published'),
        Index('idx_blog_featured', 'featured'),
        Index('idx_blog_category_published', 'category', 'published'),
    )
```

B. ASYNC PROCESSING FOR HEAVY TASKS
-----------------------------------
```python
# app/core/task_queue.py
import asyncio
from concurrent.futures import ThreadPoolExecutor
from typing import Callable, Any

class AsyncTaskProcessor:
    def __init__(self, max_workers: int = 4):
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
    
    async def process_heavy_task(self, func: Callable, *args, **kwargs) -> Any:
        """Process CPU-intensive tasks in thread pool"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(self.executor, func, *args, **kwargs)
    
    async def process_cv_upload(self, file_path: str):
        """Process CV upload asynchronously"""
        return await self.process_heavy_task(self._extract_text_from_file, file_path)
    
    def _extract_text_from_file(self, file_path: str) -> str:
        # CPU-intensive text extraction
        # This runs in a separate thread
        pass
```

20. FINAL IMPLEMENTATION CHECKLIST
===================================

□ Set up FastAPI project structure
□ Configure database connection and models
□ Implement all API endpoints with proper validation
□ Add error handling and logging
□ Implement RAG system for CV chat
□ Add rate limiting and security measures
□ Set up caching (Redis)
□ Add monitoring and health checks
□ Write comprehensive tests
□ Configure CORS for frontend integration
□ Set up environment variables
□ Add Docker configuration
□ Implement file upload handling
□ Add AI service integration
□ Set up vector database
□ Add email functionality for contact form
□ Implement search and filtering
□ Add pagination for large datasets
□ Set up backup and recovery procedures
□ Configure production deployment
□ Add performance monitoring
□ Implement security best practices
□ Test all endpoints with frontend
□ Document API endpoints
□ Set up CI/CD pipeline

This comprehensive guide provides everything needed to build a production-ready backend that perfectly integrates with your frontend portfolio!

FRONTEND CONTENT SPECIFICATIONS FOR BACKEND MATCHING
====================================================

21. EXACT FRONTEND CONTENT TO REPLICATE IN BACKEND
==================================================

A. AI TOOLS CATEGORIES & ITEMS (EXACT FROM FRONTEND)
---------------------------------------------------
Categories: ['All', 'Image Generation', 'Video Generation', 'Text Generation', 'Presentation', 'Design']

Tools List (12 items):
1. Midjourney - AI-powered image generation with stunning artistic results (Image Generation, Popular, Paid)
2. Runway ML - Professional video editing and generation using AI (Video Generation, Popular, Freemium)
3. ChatGPT - Advanced language model for conversation and content creation (Text Generation, Popular, Freemium)
4. Gamma - AI-powered presentation creation and design (Presentation, Trending, Freemium)
5. DALL-E 3 - OpenAI's latest image generation model (Image Generation, Popular, Paid)
6. Synthesia - AI video generation with virtual presenters (Video Generation, Professional, Paid)
7. Beautiful.ai - Smart presentation design with AI assistance (Presentation, Popular, Paid)
8. Stable Diffusion - Open-source image generation model (Image Generation, Open Source, Free)
9. Pictory - AI video creation from long-form content (Video Generation, Trending, Freemium)
10. Canva AI - AI-powered design and presentation tools (Design, Popular, Freemium)
11. Jasper - AI writing assistant for marketing and content (Text Generation, Popular, Paid)
12. Tome - AI-powered storytelling and presentation platform (Presentation, Trending, Freemium)

Status Types: Popular, Trending, Professional, Open Source
Pricing Types: Paid, Freemium, Free

B. BLOG CATEGORIES & POSTS (EXACT FROM FRONTEND)
-------------------------------------------------
Categories: ['All', 'Healthcare', 'Marketing', 'Technology', 'Ethics', 'Finance', 'Education', 'Transportation']

Blog Posts (8 items):
1. AI in Healthcare: Revolutionizing Patient Care (Healthcare, Featured, 5 min read)
2. The Future of AI in Marketing: Personalization at Scale (Marketing, Regular, 4 min read)
3. Generative AI: Beyond Text and Images (Technology, Featured, 6 min read)
4. AI Ethics: Balancing Innovation with Responsibility (Ethics, Regular, 7 min read)
5. Machine Learning in Finance: Risk Assessment and Trading (Finance, Regular, 5 min read)
6. AI-Powered Education: Personalized Learning for Every Student (Education, Regular, 4 min read)
7. Computer Vision in Autonomous Vehicles (Transportation, Regular, 6 min read)
8. Natural Language Processing: Understanding Human Communication (Technology, Regular, 5 min read)

Featured Posts: 2 (Healthcare and Technology articles)
Regular Posts: 6

C. PROJECTS SECTION (EXACT FROM FRONTEND)
-----------------------------------------
Projects (4 items):
1. Interactive Chatbot - Homepage chatbot with avatar and voice (Tags: LLM, FastAPI, r3f)
2. Tool Explorer - Search and curate latest AI tools (Tags: Scraping, SWR)
3. RAG CV Chat - Ask my CV anything, grounded answers (Tags: Chroma, Embeddings)
4. Mini Game - p5.js easter egg with particles (Tags: p5, UX)

D. TECHNICAL STACK MENTIONED IN FRONTEND
----------------------------------------
Skills/Tags: Python, FastAPI, LLMs, Vector DBs, Next.js, r3f, p5.js, Tailwind, Docker

E. FRONTEND EXPECTED API RESPONSES
----------------------------------
Tools API (/tools/list):
- Must return exactly 12 tools with categories: Image Generation, Video Generation, Text Generation, Presentation, Design
- Status values: Popular, Trending, Professional, Open Source
- Pricing values: Paid, Freemium, Free

Blog API (/news/list):
- Must return exactly 8 blog posts with categories: Healthcare, Marketing, Technology, Ethics, Finance, Education, Transportation
- Featured posts: 2 (Healthcare and Technology)
- Read time format: "X min read"

Chat API (/chat/send):
- Must handle questions about Daniyal's experience, tech stack, and projects
- Context: Software Engineer specializing in FastAPI backends, AI agents, Next.js, r3f, p5.js

CV Chat API (/cv/query):
- Must implement RAG system for CV document queries
- Support PDF and DOCX uploads
- Return confidence scores and source references

Contact API (/contact/submit):
- Must handle: name, email, message
- Send email notifications
- Store submissions in database

F. FRONTEND NAVIGATION STRUCTURE
--------------------------------
Homepage Sections:
1. Hero (with 3D avatar and chat widget)
2. About Me (introduction and skills)
3. Work Experience (professional background)
4. Projects (4 project cards)
5. Footer (contact and social links)

Navigation Links:
- Home: Links to homepage
- Projects: Scrolls to #projects section on homepage
- AI Tools: Links to /tools page
- Blog: Links to /blog page
- Chat with my CV: Links to /chat page
- Contact: Links to /contact page

G. FRONTEND COMPONENT DEPENDENCIES
----------------------------------
Components that need backend data:
1. ChatWidget - needs /chat/send endpoint
2. ToolsSection - needs /tools/list endpoint (now separate page)
3. BlogSection - needs /news/list endpoint (now separate page)
4. CVChatSection - needs /cv/upload and /cv/query endpoints
5. Contact form - needs /contact/submit endpoint

H. FRONTEND ENVIRONMENT VARIABLES
---------------------------------
NEXT_PUBLIC_API_URL - Backend API base URL
Default fallback: http://localhost:8000

I. FRONTEND ERROR HANDLING PATTERNS
-----------------------------------
- API failures fall back to mock data
- Loading states for async operations
- Error boundaries for component failures
- Graceful degradation when backend unavailable

J. FRONTEND SEARCH & FILTERING
-------------------------------
Tools Page:
- Search by tool name or description
- Filter by category (Image Generation, Video Generation, Text Generation, Presentation, Design)
- Status-based filtering (Popular, Trending, Professional, Open Source)

Blog Page:
- Search by title or excerpt
- Filter by category (Healthcare, Marketing, Technology, Ethics, Finance, Education, Transportation)
- Featured articles highlighting

K. FRONTEND DATA STRUCTURE REQUIREMENTS
---------------------------------------
All API responses must include:
- success: boolean
- data: object/array
- message: string (optional)
- error: string (optional)

Specific data structures:
- Tools: id, name, description, category, status, url, pricing
- Blog posts: id, title, excerpt, category, published, readTime, featured, content
- Chat: answer, timestamp
- CV query: answer, confidence, sources
- Contact: success, message

L. FRONTEND MOCK DATA FALLBACKS
--------------------------------
When backend unavailable, frontend shows:
- Tools: 12 predefined AI tools (exact list above)
- Blog: 8 predefined AI articles (exact list above)
- Chat: Mock responses about Daniyal
- Projects: 4 predefined projects (exact list above)

M. FRONTEND PERFORMANCE EXPECTATIONS
------------------------------------
- API response time: < 500ms for simple queries
- File upload: Support up to 10MB PDF/DOCX files
- Search results: Return within 200ms
- Pagination: Not currently implemented (all items shown)
- Caching: Frontend uses SWR for data fetching

N. FRONTEND INTEGRATION POINTS
------------------------------
Exact API endpoints frontend expects:
1. POST /chat/send - Chatbot functionality
2. GET /tools/list - AI tools directory
3. GET /news/list - Blog posts
4. POST /cv/upload - CV document upload
5. POST /cv/query - CV RAG queries
6. POST /contact/submit - Contact form

O. FRONTEND UI/UX REQUIREMENTS
-------------------------------
- Responsive design for mobile/desktop
- Dark theme with blue accent colors
- Smooth animations with Framer Motion
- Loading states and error handling
- Search and filter functionality
- Category-based organization

This detailed frontend specification ensures the backend will perfectly match your existing frontend implementation!

COMPLETE FRONTEND CODE FOR BACKEND REFERENCE
============================================

22. EXACT COMPONENT CODE IMPLEMENTATIONS
========================================

A. ABOUT COMPONENT (EXACT CODE)
-------------------------------
```jsx
import { motion } from 'framer-motion'

const skills = ['Python', 'FastAPI', 'LLMs', 'OpenRouter', 'Vector DBs', 'PostgreSQL', 'Next.js', 'React Three Fiber', 'p5.js', 'Tailwind CSS', 'Docker', 'CI/CD']

export default function About(){
  return (
    <section id="about" className="py-16">
      <div className="mx-auto max-w-7xl px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h2 className="text-3xl md:text-4xl font-bold mb-4">About Me</h2>
          <p className="text-lg text-slate-300 max-w-3xl mx-auto">
            I'm a passionate software engineer focused on building AI-powered products that deliver exceptional user experiences.
          </p>
        </motion.div>

        <div className="grid grid-cols-12 gap-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="col-span-12 lg:col-span-6 card p-8"
          >
            <h3 className="text-2xl font-semibold mb-4">Who I Am</h3>
            <p className="text-slate-300 mb-6 leading-relaxed">
              I'm a software engineer who loves turning complex ideas into elegant, user-friendly applications. 
              My passion lies in AI integration, building robust backends, and creating immersive frontend experiences.
            </p>
            <p className="text-slate-300 leading-relaxed">
              I believe in writing clean, maintainable code and staying up-to-date with the latest technologies 
              to deliver cutting-edge solutions.
            </p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.1 }}
            className="col-span-12 lg:col-span-6 card p-8"
          >
            <h3 className="text-2xl font-semibold mb-4">Technical Skills</h3>
            <div className="flex flex-wrap gap-3">
              {skills.map(skill => (
                <span
                  key={skill}
                  className="px-4 py-2 rounded-full bg-brand-500/20 text-brand-300 ring-1 ring-brand-500/30 font-medium text-sm"
                >
                  {skill}
                </span>
              ))}
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  )
}
```

B. WORK EXPERIENCE COMPONENT (EXACT CODE)
-----------------------------------------
```jsx
import { motion } from 'framer-motion'

const experiences = [
  {
    title: "Senior Software Engineer",
    company: "Tech Company",
    period: "2023 - Present",
    description: "Leading development of AI-powered applications using FastAPI and Next.js. Implemented RAG systems and LLM integrations.",
    technologies: ["Python", "FastAPI", "LLMs", "Next.js", "PostgreSQL"]
  },
  {
    title: "Full Stack Developer",
    company: "Startup",
    period: "2022 - 2023",
    description: "Built scalable web applications and REST APIs. Worked on frontend optimization and backend performance.",
    technologies: ["Python", "Django", "React", "PostgreSQL", "AWS"]
  },
  {
    title: "Software Engineer",
    company: "Digital Agency",
    period: "2021 - 2022",
    description: "Developed custom web solutions and e-commerce platforms. Collaborated with design teams on UX improvements.",
    technologies: ["JavaScript", "Node.js", "React", "MongoDB", "Docker"]
  }
]

export default function WorkExperience(){
  return (
    <section id="experience" className="py-16">
      <div className="mx-auto max-w-7xl px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h2 className="text-3xl md:text-4xl font-bold mb-4">Work Experience</h2>
          <p className="text-lg text-slate-300 max-w-3xl mx-auto">
            My professional journey in software development, focusing on building innovative solutions and growing technical expertise.
          </p>
        </motion.div>

        <div className="space-y-8">
          {experiences.map((exp, index) => (
            <motion.div
              key={exp.title}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="card p-8"
            >
              <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
                <div>
                  <h3 className="text-xl font-semibold text-white">{exp.title}</h3>
                  <p className="text-brand-300 font-medium">{exp.company}</p>
                </div>
                <span className="text-slate-400 text-sm md:text-base mt-2 md:mt-0">
                  {exp.period}
                </span>
              </div>
              
              <p className="text-slate-300 mb-4 leading-relaxed">
                {exp.description}
              </p>
              
              <div className="flex flex-wrap gap-2">
                {exp.technologies.map(tech => (
                  <span
                    key={tech}
                    className="px-3 py-1 rounded-full bg-white/10 text-slate-200 text-xs font-medium"
                  >
                    {tech}
                  </span>
                ))}
              </div>
            </motion.div>
          ))}
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6, delay: 0.3 }}
          className="text-center mt-12"
        >
          <div className="card p-8 max-w-2xl mx-auto">
            <h3 className="text-xl font-semibold mb-4">What I'm Looking For</h3>
            <p className="text-slate-300 mb-6">
              I'm seeking opportunities to work on challenging projects involving AI/ML, 
              building scalable backends, and creating innovative user experiences.
            </p>
            <div className="flex flex-wrap justify-center gap-3">
              {['AI/ML Projects', 'Backend Development', 'Full-Stack Solutions', 'Innovation'].map(item => (
                <span
                  key={item}
                  className="px-4 py-2 rounded-full bg-brand-500/20 text-brand-300 ring-1 ring-brand-500/30 font-medium text-sm"
                >
                  {item}
                </span>
              ))}
            </div>
          </div>
        </motion.div>
      </div>
    </section>
  )
}
```

C. NAVBAR COMPONENT (EXACT CODE)
--------------------------------
```jsx
import { motion } from 'framer-motion'
import Link from 'next/link'
import { useRouter } from 'next/router'

const links = [
  { href: '/', label: 'Home', isAnchor: false },
  { href: '#projects', label: 'Projects', isAnchor: true },
  { href: '/tools', label: 'AI Tools', isAnchor: false },
  { href: '/blog', label: 'Blog', isAnchor: false },
  { href: '/chat', label: 'Chat with my CV', isAnchor: false },
]

export default function Navbar(){
  const router = useRouter()

  const handleNavigation = (link) => {
    if (link.isAnchor) {
      // If we're not on homepage, navigate there first
      if (router.pathname !== '/') {
        router.push('/').then(() => {
          // Wait for navigation, then scroll to section
          setTimeout(() => {
            const element = document.querySelector(link.href)
            if (element) {
              element.scrollIntoView({ behavior: 'smooth' })
            }
          }, 100)
        })
      } else {
        // Already on homepage, just scroll
        const element = document.querySelector(link.href)
        if (element) {
          element.scrollIntoView({ behavior: 'smooth' })
        }
      }
    }
  }

  return (
    <header className="sticky top-0 z-50">
      <div className="mx-auto max-w-7xl px-6 py-4">
        <motion.nav
          initial={{ y: -20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          className="card flex items-center justify-between px-5 py-3"
        >
          <Link href="/" className="text-xl font-bold hover:text-brand-300 transition-colors">Daniyal</Link>
          <ul className="flex items-center gap-6 text-sm text-slate-200">
            {links.map(l => (
              <li key={l.href}>
                {l.isAnchor ? (
                  <button
                    onClick={() => handleNavigation(l)}
                    className="hover:text-white transition-colors cursor-pointer"
                  >
                    {l.label}
                  </button>
                ) : (
                  <Link href={l.href} className="hover:text-white transition-colors">
                    {l.label}
                  </Link>
                )}
              </li>
            ))}
          </ul>
          <Link href="/contact" className="btn">Contact</Link>
        </motion.nav>
      </div>
    </header>
  )
}
```

D. FOOTER COMPONENT (EXACT CODE)
---------------------------------
```jsx
export default function Footer(){
  return (
    <footer className="py-10">
      <div className="mx-auto max-w-7xl px-6">
        <div className="card p-6 flex flex-col md:flex-row items-center justify-between">
          <p className="text-slate-300">© {new Date().getFullYear()} Daniyal. All rights reserved.</p>
          <div className="flex gap-4 mt-3 md:mt-0">
            <a className="link" href="#">GitHub</a>
            <a className="link" href="#">LinkedIn</a>
            <a className="link" href="#">Email</a>
          </div>
        </div>
      </div>
    </footer>
  )
}
```

E. HOMEPAGE STRUCTURE (EXACT CODE)
----------------------------------
```jsx
import Hero from '../components/Hero'
import About from '../components/About'
import WorkExperience from '../components/WorkExperience'
import ProjectsSection from '../components/ProjectsSection'
import Footer from '../components/Footer'

export default function Home() {
  return (
    <main className="bg-hero min-h-screen">
      <Hero />
      <About />
      <WorkExperience />
      <ProjectsSection />
      <Footer />
    </main>
  )
}
```

F. TOOLS PAGE (EXACT CODE)
--------------------------
```jsx
import { motion } from 'framer-motion'
import { useState } from 'react'
import Footer from '../../components/Footer'

const tools = [
  {
    id: 't1',
    name: 'Midjourney',
    description: 'AI-powered image generation with stunning artistic results',
    category: 'Image Generation',
    status: 'Popular',
    url: 'https://midjourney.com',
    pricing: 'Paid'
  },
  // ... all 12 tools with exact data
]

const categories = ['All', 'Image Generation', 'Video Generation', 'Text Generation', 'Presentation', 'Design']

export default function ToolsPage() {
  const [selectedCategory, setSelectedCategory] = useState('All')
  const [searchTerm, setSearchTerm] = useState('')

  const filteredTools = tools.filter(tool => {
    const matchesCategory = selectedCategory === 'All' || tool.category === selectedCategory
    const matchesSearch = tool.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         tool.description.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesCategory && matchesSearch
  })

  return (
    <>
      <div className="pt-24 px-6">
        {/* Tools page content */}
      </div>
      <Footer />
    </>
  )
}
```

G. BLOG PAGE (EXACT CODE)
--------------------------
```jsx
import { motion } from 'framer-motion'
import { useState } from 'react'
import Footer from '../../components/Footer'

const blogs = [
  {
    id: '1',
    title: 'AI in Healthcare: Revolutionizing Patient Care',
    excerpt: 'How artificial intelligence is transforming diagnosis, treatment planning, and patient monitoring in modern healthcare systems.',
    category: 'Healthcare',
    published: '2024-01-15',
    readTime: '5 min read',
    featured: true
  },
  // ... all 8 blog posts with exact data
]

const categories = ['All', 'Healthcare', 'Marketing', 'Technology', 'Ethics', 'Finance', 'Education', 'Transportation']

export default function BlogPage() {
  const [selectedCategory, setSelectedCategory] = useState('All')
  const [searchTerm, setSearchTerm] = useState('')

  const filteredBlogs = blogs.filter(blog => {
    const matchesCategory = selectedCategory === 'All' || blog.category === selectedCategory
    const matchesSearch = blog.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         blog.excerpt.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesCategory && matchesSearch
  })

  const featuredBlogs = filteredBlogs.filter(blog => blog.featured)
  const regularBlogs = filteredBlogs.filter(blog => !blog.featured)

  return (
    <>
      <div className="pt-24 px-6">
        {/* Blog page content */}
      </div>
      <Footer />
    </>
  )
}
```

H. CONTACT PAGE (EXACT CODE)
-----------------------------
```jsx
import { useState } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import Footer from '../../components/Footer'

export default function ContactPage() {
  const [form, setForm] = useState({ name: "", email: "", message: "" })
  const [submitted, setSubmitted] = useState(false)

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value })
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    console.log("Form submitted:", form)
    setSubmitted(true)
    setForm({ name: "", email: "", message: "" })
  }

  return (
    <>
      <div className="pt-24 px-6 flex flex-col items-center">
        {/* Contact form content */}
      </div>
      <Footer />
    </>
  )
}
```

I. CHAT PAGE (EXACT CODE)
--------------------------
```jsx
import { useState } from 'react'
import { motion } from 'framer-motion'
import Footer from '../../components/Footer'

export default function ChatPage() {
  const [messages, setMessages] = useState([
    { role: 'assistant', text: "Hi! I'm Daniyal's AI assistant. Ask me anything about him!" }
  ])
  const [input, setInput] = useState("")

  const sendMessage = () => {
    if (!input.trim()) return
    const newMessages = [...messages, { role: 'user', text: input }]
    setMessages(newMessages)
    setInput("")
    // Mock AI reply
    setTimeout(() => {
      setMessages(m => [...m, { role: 'assistant', text: "Daniyal is a software engineer specializing in FastAPI backends, AI agents, and Next.js frontends." }])
    }, 500)
  }

  return (
    <>
      <div className="pt-24 px-6 flex flex-col h-screen">
        {/* Chat interface content */}
      </div>
      <Footer />
    </>
  )
}
```

23. COMPLETE DATA STRUCTURES FOR BACKEND
=========================================

A. TOOLS DATA STRUCTURE (EXACT)
-------------------------------
```json
{
  "success": true,
  "data": {
    "items": [
      {
        "id": "t1",
        "name": "Midjourney",
        "description": "AI-powered image generation with stunning artistic results",
        "category": "Image Generation",
        "status": "Popular",
        "url": "https://midjourney.com",
        "pricing": "Paid"
      },
      {
        "id": "t2",
        "name": "Runway ML",
        "description": "Professional video editing and generation using AI",
        "category": "Video Generation",
        "status": "Popular",
        "url": "https://runwayml.com",
        "pricing": "Freemium"
      }
      // ... all 12 tools
    ]
  }
}
```

B. BLOG DATA STRUCTURE (EXACT)
------------------------------
```json
{
  "success": true,
  "data": {
    "items": [
      {
        "id": "1",
        "title": "AI in Healthcare: Revolutionizing Patient Care",
        "excerpt": "How artificial intelligence is transforming diagnosis, treatment planning, and patient monitoring in modern healthcare systems.",
        "category": "Healthcare",
        "published": "2024-01-15",
        "readTime": "5 min read",
        "featured": true,
        "content": "Full article content here..."
      }
      // ... all 8 blog posts
    ]
  }
}
```

C. CHAT RESPONSE STRUCTURE (EXACT)
----------------------------------
```json
{
  "success": true,
  "data": {
    "answer": "Daniyal is a software engineer specializing in FastAPI backends, AI agents, and Next.js frontends.",
    "timestamp": "2024-01-15T10:30:00Z"
  }
}
```

D. CV QUERY RESPONSE STRUCTURE (EXACT)
--------------------------------------
```json
{
  "success": true,
  "data": {
    "answer": "Based on Daniyal's CV, he has 3+ years of experience in Python development...",
    "confidence": 0.85,
    "sources": [
      {
        "filename": "daniyal_cv.pdf",
        "page": 1,
        "content": "Relevant CV content..."
      }
    ]
  }
}
```

E. CONTACT SUBMISSION RESPONSE (EXACT)
--------------------------------------
```json
{
  "success": true,
  "data": {
    "message": "Thank you for your message! I'll get back to you soon.",
    "submission_id": "uuid-here"
  }
}
```

24. BACKEND IMPLEMENTATION REQUIREMENTS
=======================================

A. EXACT API ENDPOINTS NEEDED
-----------------------------
1. **POST /api/v1/chat/send**
   - Request: {"message": "string"}
   - Response: {"success": true, "data": {"answer": "string", "timestamp": "datetime"}}

2. **GET /api/v1/tools/list**
   - Response: {"success": true, "data": {"items": [12 tools with exact structure]}}

3. **GET /api/v1/news/list**
   - Response: {"success": true, "data": {"items": [8 blog posts with exact structure]}}

4. **POST /api/v1/cv/upload**
   - Request: Multipart form with PDF/DOCX file
   - Response: {"success": true, "data": {"message": "CV processed successfully"}}

5. **POST /api/v1/cv/query**
   - Request: {"question": "string"}
   - Response: {"success": true, "data": {"answer": "string", "confidence": "float", "sources": "array"}}

6. **POST /api/v1/contact/submit**
   - Request: {"name": "string", "email": "string", "message": "string"}
   - Response: {"success": true, "data": {"message": "string", "submission_id": "uuid"}}

B. EXACT DATABASE SCHEMA NEEDED
-------------------------------
```sql
-- AI Tools Table
CREATE TABLE ai_tools (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    category VARCHAR(100) NOT NULL,
    status VARCHAR(50) NOT NULL,
    url VARCHAR(500) NOT NULL,
    pricing VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Blog Posts Table
CREATE TABLE blog_posts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    excerpt TEXT NOT NULL,
    content TEXT NOT NULL,
    category VARCHAR(100) NOT NULL,
    published DATE NOT NULL,
    read_time VARCHAR(50) NOT NULL,
    featured BOOLEAN DEFAULT FALSE,
    slug VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Chat History Table
CREATE TABLE chat_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    response TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- CV Documents Table
CREATE TABLE cv_documents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    filename VARCHAR(255) NOT NULL,
    file_path VARCHAR(500) NOT NULL,
    file_size INTEGER NOT NULL,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed BOOLEAN DEFAULT FALSE,
    embeddings_path VARCHAR(500)
);

-- CV Queries Table
CREATE TABLE cv_queries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    confidence FLOAT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    session_id VARCHAR(255) NOT NULL
);

-- Contact Submissions Table
CREATE TABLE contact_submissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) DEFAULT 'pending'
);
```

C. EXACT SEED DATA NEEDED
--------------------------
The backend must populate the database with exactly:
- **12 AI tools** with the exact names, descriptions, categories, statuses, and pricing
- **8 blog posts** with the exact titles, excerpts, categories, and featured status
- **4 projects** with the exact descriptions and tags

D. EXACT SEARCH & FILTERING LOGIC
----------------------------------
- **Tools search**: Search by name OR description (case-insensitive)
- **Tools filtering**: Filter by category (Image Generation, Video Generation, Text Generation, Presentation, Design)
- **Blog search**: Search by title OR excerpt (case-insensitive)
- **Blog filtering**: Filter by category (Healthcare, Marketing, Technology, Ethics, Finance, Education, Transportation)
- **Featured posts**: Blog API must return featured posts first

This comprehensive guide provides everything needed to build a backend that perfectly integrates with your frontend portfolio!
